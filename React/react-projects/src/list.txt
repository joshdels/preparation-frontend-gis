🧩 1. Counter App - Done!

Concepts: Components, State, Event Handling
→ Create a button that increases or decreases a number.
Bonus: Add a “Reset” button.

📝 2. Todo List - - Done!

Concepts: State, Props, Lists & Keys, Conditional Rendering
→ Add, display, and delete todo items.
Bonus: Mark tasks as complete (toggle state).

💬 3. Feedback Form - Done!

Concepts: Controlled Components, State, Event Handling
→ Create a simple form (name, comment) and show the submitted feedback below.
Bonus: Add validation (empty input warning).

📦 4. Product Card / Profile Card - Done!

Concepts: Props, Component Composition
→ Build reusable cards that display user or product info.
Bonus: Combine multiple small components (e.g., Avatar, Info, Button).

🌡️ 5. Temperature Converter - Done!

Concepts: State, Lifting State Up, Controlled Inputs
→ Input °C converts to °F and vice versa.
Bonus: Show messages like “Boiling” when above 100°C.

📃 6. FAQ Accordion - Done!

Concepts: Conditional Rendering, State
→ Click a question to toggle showing the answer.
Bonus: Allow only one open at a time.

🗂️ 7. Simple User List - On Going

Concepts: Props, Lists & Keys, Component Composition
→ Map through an array of users and display them in cards.
Bonus: Add a search filter.

🕹️ 8. Light/Dark Mode Toggle

Concepts: State, Event Handling, Conditional Rendering
→ Toggle between light and dark UI themes.
Bonus: Save the mode to localStorage.

⚙️ INTERMEDIATE REACT MINI PROJECTS


🧮 9. Shared Counter Dashboard

Concepts: Lifting State Up, Props, Event Handling
🧩 Goal:
Build 3 counter components (CounterA, CounterB, CounterC) that share one total count in the parent App.
Changing any counter updates the total.
🎯 Bonus:
Add a reset button in the parent that resets all counters.
Pass handlers down as props.

📦 10. Shopping Cart

Concepts: Lifting State Up, Derived State, Lists & Keys
🧩 Goal:
Display products with “Add to Cart” buttons.
Show a cart summary with total items and price.
🎯 Bonus:
Add quantity updates and item removal.
Move product and cart logic into separate components.

🌤️ 11. Weather Fetcher

Concepts: useEffect, Fetch API, Conditional Rendering
🧩 Goal:
Input a city name and fetch current weather (use OpenWeatherMap API
).
Show “Loading…” or “Error” messages.
🎯 Bonus:
Cache the last search in localStorage.
Display icons based on weather type (sun, rain, etc).

⏰ 12. Digital Clock / Timer

Concepts: useEffect, Cleanup Functions
🧩 Goal:
Display live time updating every second.
Add a Start/Stop timer button.
🎯 Bonus:
Create a countdown feature with custom duration input.
Clean up the interval properly when component unmounts.

🌙 13. Global Theme Toggle

Concepts: Context API, State Management
🧩 Goal:
Build a ThemeContext that manages light or dark mode globally.
Two components (e.g. Navbar, Card) should react to the theme.
🎯 Bonus:
Save theme preference in localStorage with useEffect.
Add smooth background transition.

🧭 14. Auth Context (Fake Login System)

Concepts: Context API, Conditional Rendering, useEffect
🧩 Goal:
Create a context that stores a fake user object (e.g., {name: "Joshua"}).
“Login” and “Logout” buttons toggle it.
🎯 Bonus:
Persist the user session in localStorage.
Add “Welcome back!” message if user reloads.

🪝 15. Custom Hook – useLocalStorage

Concepts: Custom Hooks, State Persistence
🧩 Goal:
Create a useLocalStorage(key, initialValue) hook.
Replace normal useState with your custom hook in any project (like Theme or Counter).
🎯 Bonus:
Add support for JSON objects (auto parse/stringify).

🧠 16. Custom Hook – useFetch

Concepts: Custom Hooks, useEffect, Error Handling
🧩 Goal:
Build a useFetch(url) hook to handle loading, error, and data states.
Use it to fetch and render a list of posts or users (from JSONPlaceholder API).
🎯 Bonus:
Add “Refresh Data” button.
Handle cancelled requests gracefully.


🧭 Suggested Order:
🧮 Shared Counter Dashboard → Lifting State practice
📦 Shopping Cart → Props & derived state
🌤️ Weather Fetcher → useEffect + API
⏰ Digital Clock → Effect cleanup
🌙 Theme Toggle → Context API
🧭 Auth Context → Global state
🪝 useLocalStorage → Custom hook basics
🧠 useFetch → Reusable async logic